//
// Problem_13
// Simpson.h
//
// Created by Aurimas A. Nausedas on 9/20/19.
// Updated by Aurimas A. Nausedas on 10/31/21.


#ifndef simpson_h
#define simpson_h

// ********************************************
double simpson(double (*fname)(double x), double a, double b, int n)
{
    // jei n = k, tuomet reikia paskaiciuoti g(x) 2k + 1 vietose | if n = k, then g (x) must be calculated at 2k + 1
    // pvz. jei du reziai, tuomet reikia paskaiciuoti: | e.g. if two times, then the following must be calculated:
    // 2 centrinius rezio taskus | 2 central points of the ridge
    // 2 kairines krastines | 2 left edges
    // 1 desine krastine. | 1 right edge

    // specialus atvejis, kai a = b | special case when a = b
    if (a == b)
    {
        double res = 0;
        return res;
    }

    // puse rezio plocio hpus = (b-a)/(2n) | half width hpus = (b-a) / (2n)
    double hpus = (b - a) / (n * 2);

    // inicijuoju suma f | initiaitinmg sum f
    double f = 0;

    // ciklu skaiciavimui | calculating cycles
    int i = 1;

    // stabteliu prie kiekvienos skaiciuotinos | stop at each count
    // intervalo (a,b) vertes x | x values of the interval (a, b) 
    for (double x = a; x <= b; x += hpus)
    {
        // galima isskirti tris situacijas: | three situations can be distinguished:

        // 1. jei tai pati intervalo (a,b) kaire arba desine | 1. if it is itself to the left or right of the interval (a, b)
        // tuomet pridedant g(i) prie sumos f. | then adding g (i) to the sum of f.
        if (i == 1 || i == (2 * n) + 1)
        {
            f += fname(x);
        }

        // 2. rezio jei i rezio vidury, g(i) dauginam is 4 | 2. the field if i is in the middle of the field, g (i) is multiplied by 4
        else if (i % 2 == 0) // jei lyginis, t.y. rezio vidurys
        {
            f += 4 * fname(x);
        }

        // 3. jei i nelyginis, esu ties i verte tarp dvieju intervalu | 3. if i is odd, I am at the value between the two intervals
        else
        {
            f += 2 * fname(x);
        }


        // pridedu vieneta | ading one
        i++;
    }
    return f * 2 * hpus / 6;
}


#endif /* simpson_h */
