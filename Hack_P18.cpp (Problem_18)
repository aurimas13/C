//
// Problem_18.c
//
// Created by Aurimas Nausedas on 9/20/19.
// Updated by Aurimas Nausedas on 10/31/21.

#ifndef PLOT_H
#define PLOT_H
#include <math.h>
#include <string.h>
#include <graphics.h>
#include <stdio.h>
#include <stdlib.h>

//goes to main.cpp
#include <conio.h>

void init();

class Plot
{
public:
    Plot(int lxp, int lyp,int xd, int yd, // lango matmenys pilkseliais | window dimensions in pixels
         double lminX, double lmaxX, double ldeltaX,
         double lminY, double lmaxY, double ldeltaY,
         int lsp, int lspt);
    void on();
    void act();
    double Xmin(){return minX;}
    double Xmax(){return maxX;}
    double Xdel(){return deltaX;}
    double Fmin(){return minY;}
    double Fmax(){return maxY;}
    double Fdel(){return deltaY;}
    int fx(double x);
    int fy(double y);
    void point(double x, double y, int spalva);
    void start(double x, double y);
    void draw(double x, double y);
    void legend(double x, double y, double pix, char mystr[]);
private:
    int xp,yp,xg,yg,sp,spt;
    double XtoP, YtoP,
    minX, maxX,deltaX,
    minY,maxY,deltaY;

};

#endif // ifndef PLOT_H

// ================================================================================
// ================================================================================
// ================================================================================


// plot.cpp
// class Plot
// Grafiko langas | Graph window
// is Algirdo Matulio knygos Mokomes programuoti 128 psl. | from Algirdas Matulis' book "We are learning to program" 128 pages.

//#include "plot.h"

//******************************************************
void init() // Grafine moda | Graphical mode
{
    int Gd, Gm, ErCo;
    Gd=DETECT;
    initgraph(&Gd, &Gm, "c:\\TC\\BGI");
    ErCo=graphresult();
    if ( ErCo != grOk)
    {
        printf("Nera grafikos (No graphics)");
        exit(1);
    }
}

// Klases Plot funkcijos ******************************
Plot::Plot(int lxp, int lyp, int xd, int yd, // lango matmenys pikseliais | window dimensions in pixels
           double lminX, double lmaxX, double ldeltaX,
           double lminY, double lmaxY, double ldeltaY,
           int lsp, int lspt)
{
    xp = lxp;
    yp = lyp;
    xg = xp + xd; // pixeliais | pixels
    yg = yp + yd; // pixeliais | pixels
    sp = lsp; // fillstyle number
    spt = lspt;
    minX = lminX; // vienetais x asyje | units in the x-axis
    maxX = lmaxX; // vienetais x asyje | units in the x-axis
    deltaX = ldeltaX; // groteliu plotis | grid width
    minY = lminY; // vienetais y asyje | units in the x-axis
    maxY = lmaxY; // vienetais y asyje | units in the x-axis
    deltaY = ldeltaY; // groteliu plotis | grid width

    // daugini atstuma x vienetais is XtoP ir gauni pixkselius | multiply the distance in x units from XtoP and you get pixels
    XtoP = ((double)(xg - xp - 39)) / (maxX - minX);

    // daugini atstuma y vienetais is YtoP ir gauni pikselius | multiply the distance in y units from YtoP and you get pixels
    YtoP = ((double)(yg - yp - 39)) / (maxY - minY);

}

// ------------------------------------------------------
void Plot::on()
{
    double Xst, Yst, a, b;
    int r, l, rb;
    char s[20]; // for storing floats as strings later

    // visa (max) ekrana uzpildau pasirinkta spalva | the entire (max) screen filled with the selected color
    setviewport(0, 0, getmaxx(), getmaxy(), 1); // max screen coord.
    // sita perkelciau i atskira funkcija | I moved this to a separate function
    // jei butu poreikis kelis subplots padaryti | if there would be a need for multiple subplots to do
    setfillstyle(SOLID_FILL, sp); // set the current viewport for
    // graphics output, absolute coord
    bar(xp, yp, xg, yg); // rectangle filled

    // pasirinkta staciakampi (pikseliais) apibreziu remu | selected rectangular (in pixels) frame
    setviewport(xp, yp, xg, yg, 1);
    Xst = deltaX * ceil(minX / deltaX);// pirmo bruksneliu padetis
    Yst = deltaY * ceil(minY / deltaY); // pirmo bruksneliu padetis
    setcolor(0);
    setlinestyle(SOLID_LINE, 0, NORM_WIDTH);
    rectangle(20, 20, xg - xp - 20, yg - yp - 19);// remas | frame

    // X asies pavadinimai | X axis names
    for (a = Xst; a < maxX; a += deltaX)
    {
        r = fx(a); // zingsniuoju pasirinktais vnt, bet piesiu pikseliais | step by step on the selected pieces, but I will tie in pixels
        b = fabs(fmod(a, 5 * deltaX)) / deltaX; // absolute, modulo
        if ((b < 0.1) || (b > 4.9))
        {
            rb = 10;
            if (fabs(a) < deltaX/2)
            {
                a = 0;
            }

            // prepare x label as string
            gcvt(a, 4, s); // float to string
            l = strlen(s);
            settextstyle(DEFAULT_FONT, HORIZ_DIR, 1);

            // atspaudinama xticklabel | xticklabel is printed
            outtextxy(r + 16 - l / 2, yg - yp - 10, s);
        }
        else
        {
            rb = 5; // kiek islinde solid black tik | how much came out the solid black
        }

        // trumpi juodi ticks | short black ticks
        line(r + 20, 20, r + 20, 20 + rb); // virsuje | up
        line(r + 20, yg - yp - 20 - rb, r + 20, yg - yp - 20); // apacioje | down

        if((r != 0) && (r != xg - xp - 40)) //jei ne remo krastai | if not frame shores
        {
            setcolor(spt);
            setlinestyle(DOTTED_LINE, 0, NORM_WIDTH);
            line(r + 20, 20 + rb, r + 20, yg - yp - 20 - rb);
            setcolor(0);
            setlinestyle(SOLID_LINE, 0, NORM_WIDTH);
        }
    }

    // analogiskai su y-asimi | analogously with the y-axis
    for(a = Yst; a < maxY; a += deltaY)
    {
        r = fy(a);
        b = fabs(fmod(a, 5 * deltaY)) / deltaY;
        if ((b <0.1) || (b > 4.9))
        {
            rb = 10;
            if (fabs(a) < deltaY / 2)
            {
                a = 0;
            }
            gcvt(a, 4, s);
            l = strlen(s);
            settextstyle(DEFAULT_FONT, VERT_DIR, 1);
            outtextxy(13, r + 17 + 1 / 2, s);
        }

        else
        {
            rb = 5;
        }

        line(20, r + 20, 20 + rb, r + 20);
        line(xg - xp - 20 - rb, r + 20, xg - xp - 20, r + 20);
        if((r != 0) && (r != yg - yp - 39))
        {
            setcolor(spt);
            setlinestyle(DOTTED_LINE, 0, NORM_WIDTH);
            line(xg - xp - 20 - rb, r + 20, 20 + rb, r + 20);

            // return to the previous default state
            setcolor(0);
            setlinestyle(SOLID_LINE, 0, NORM_WIDTH);
        }
    }
    settextstyle(DEFAULT_FONT, HORIZ_DIR, 1);
    act();
}

// ----------------------------------------------------------
void Plot::act()
{
    // paskutinis - clip | last - clip
    // activuojama placiau | activated wider
    setviewport(xp + 20, yp + 20, xg - 20, yg - 20, 1);
}

// ----------------------------------------------------------
int Plot::fx(double x)
{
    // padeti ekrane pikseliais pakeicia i padetu x-asyje (regis) | position on the screen in pixels replaces i on the x-position (it seems)
    return (int)(floor(XtoP * (x - minX)));
}

// ----------------------------------------------------------
int Plot::fy(double y)
{
    return (int)(yg - yp - 39 - floor(YtoP * (y - minY)));
}
// ----------------------------------------------------------

void Plot::point(double x, double y, int spalva)
{
    // pades taska tam tikroje vietoje | will put a point in a certain place
    putpixel(fx(x), fy(y), spalva);
}

// ----------------------------------------------------------
void Plot::start(double x, double y)
{
    moveto(fx(x),fy(y));
}

// ----------------------------------------------------------
void Plot::draw(double x, double y)
{
    lineto(fx(x),fy(y));
}

// ----------------------------------------------------------
void Plot::legend(double x, double y, double pix, char mystr[])
{
    //short line
    double xprev = getx();
    double yprev = gety();

    setlinestyle(0, 0, THICK_WIDTH);
    line(x,y,x+pix,y);
    setlinestyle(0, 0, NORM_WIDTH);

    // text
    outtextxy(x + 2. * pix, y,mystr);

    //go back
    moveto(xprev,yprev);
}

// ================================================================================
// ================================================================================
// ================================================================================

//
//  PROG_12.cpp
//
//
// Created by 
// Updated by Aurimas Nausedas on 31/10/21.

/*
#include <stdio.h>
#include <conio.h>
#include <math.h>

#include "plot.h"

 */
#include <string.h>

double fk(double x,double n);

int main()
{

    // ivairiaspalves 1/(x/n) funkcijos, kur n = 1,...,5 | multicolor 1 / (x / n) functions, where n = 1, ..., 5
    int sk = 500; // zingsniu sk | step number
    double  Xmin = 0,
    Xmax = 10,
    Xdel = 1;
    double  Ymin = 0,
    Ymax = 10,
    Ydel = 1;

    char leg[20]; // pavadinimams | name

    double x,f;
    double h = (Xmax - Xmin) / sk; // Zingsnis | Step

    init();

    Plot T(0,0,getmaxx(),getmaxy(), // Lango matmenys | Window dimensions
           Xmin, Xmax, Xdel,        // X asis | X-axis
           Ymin, Ymax, Ydel,        // Y asis | Y-axis
           15, 13);                 // Fonas ir tinklelis | Background and grid


    T.on();
    getch();


    for (int n = 1; n < 6; n++)
    {
        x = Xmin;
        f = fk(x,n);
        T.start(x,f);
        setcolor(n);


        for (int i = 1; i <= sk; i++)
        {
            x = Xmin + i * h;
            f = fk(x,n);
            T.draw(x,f);
            char legfull[40] = "n/x, kur n = ";
            gcvt(n,0,leg);
            strcat(legfull,leg);

            T.legend(getmaxx()-200,n * 20, 10, legfull);
        }
        getch();
    }


    getch();
    closegraph();
    return 0;

}

// ---------------------------------
double fk(double x,double n)
{
    return n/(x);
}
