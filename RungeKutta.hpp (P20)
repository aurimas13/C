//
// main.hpp
// 
// Problem_20.cpp 
// All in one
//
// Created by Aurimas A. Nausedas on 9/28/19.
// Updated by Aurimas A. Nausedas on 10/31/21.

#ifndef RungeKutta_hpp
#define RungeKutta_hpp

#include <stdio.h>
#include <math.h>
#include <stdlib.h>

class RungeKutta
{
public:
    // konstruktorius | constructor
    RungeKutta(double lt, double lh, int ln);

    // destruktorius | destructor
    ~RungeKutta();

    double& operator[](int i){return x[i];};

    //virtuali funkcija


    virtual void fk(const double *lx, double *lf) = 0;
    void step();
    double get_t(){return t;};
protected:
    double t; // pradinis laikas t | initial time t

    // dinamine masyvu alokacija | dynamical array allocation
    double *x; // Rodykle i integruojamas funkcijas | Arrow i to integrated functions
    double *xt; // Rodykle i integruojamas funkcijas sekanciame taske | An arrow i to the functions to be integrated in the next point
    double *f; // Rodykle i integralo apitikres vertes | Arrow i to integral approximation values
    double *ft; // Rodykle i f vertes sekanciame taske | Arrow i to the values of ft in the next point

    double h; // zingsnio dydis | step size
    int n; // lygciu skaicius | number of equations
};

#endif /* RungeKutta_hpp */
